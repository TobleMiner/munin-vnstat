#!/bin/sh

#The MIT License (MIT)
#
#Copyright (c) 2014 Tobias Schramm (TobleMiner)
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

unit_get_factor ()
{
	local unit="$(echo "$1" | awk '{print tolower($0)}')"
	local factor=1
	if [ "$unit" = 'kib' ]; then
		factor=1024
	elif [ "$unit" = 'mib' ]; then
		factor=1048576
	elif [ "$unit" = 'gib' ]; then
		factor=1073741824
	elif [ "$unit" = 'tib' ]; then
		factor=1099511627776
	elif [ "$unit" = 'pib' ]; then
		factor=1125899906842624
	elif [ "$unit" = 'eib' ]; then
		factor=1152921504606846976
	elif [ "$unit" = 'zib' ]; then
		factor=1180591620717411303424
	fi
	printf "$factor"
}

calc_as_bits ()
{
	local unit="$(echo "$1" | grep -o '[A-Za-z]*$')"
	local unit_factor="$(unit_get_factor "$unit")"
	local cnt="$(echo "$1" | grep -o '^[0-9\.,]*' | sed 's/,/./g')"
	printf "$(awk "BEGIN{printf \"%.0f\", $cnt*$unit_factor}")"
}

if command -v hostname >/dev/null 2>&1; then
	host="$(hostname)"
elif command -v uci get system.@system[0].hostname >/dev/null 2>&1; then #OpenWRT support
 	host="$(uci get system.@system[0].hostname)"
elif [ -f /proc/sys/kernel/hostname ]; then #Last try to determine hostname
	host="$(cat /proc/sys/kernel/hostname)"
else
	exit 1 # Unable to determine hostname
fi

if ! command -v vnstat >/dev/null 2>&1; then
	exit 2 # vnstat isn't installed
fi

interface="$(basename "$0" | grep -o '[0-9a-zA-Z\.\s]*$')"
ifid="$(echo "$interface" | sed 's/[^0-9a-zA-Z]/_/g')"

case $1 in
   config)
        cat <<EOF
graph_order down up
graph_title $interface accumulated traffic
graph_args --base 1000
graph_vlabel bytes send (+) / received (-) via $interface
graph_category network
graph_info This graph shows the the total rx and tx traffic on $interface
down.label received
down.type GAUGE
down.min 0
down.graph no
down.cdef down,8,/
up.label traffic in/out
up.type GAUGE
up.min 0
up.negative down
up.cdef up,8,/
EOF
        exit 0;;
esac

if [ -n "$UID" ]; then
	:;# Do nothing
elif command -v id >/dev/null 2>&1; then
	UID="$(id | grep -o 'uid=[0-9]*' | sed 's/[^0-9]//g')"
elif [ "$USER" = 'root' || "$USERNAME" = 'root' ]; then # Last resort: Check if $USER or $USERNAME equals 'root'
	UID=0
fi
if [ "$UID" -eq 0 ]; then
	vnstat -u -i "$interface" >/dev/null 2>&1 # Works only with root
fi
fields="$(vnstat --oneline -q -i "$interface" 2> /dev/null)"
i=0
IFS=';'
for field in $fields; do
	if [ "$i" -eq 12 ]; then
		rx_bits="$(calc_as_bits "$field")"
	elif [ "$i" -eq 13 ]; then
		tx_bits="$(calc_as_bits "$field")"
	fi
	i="$(awk "BEGIN{print $i+1}")"
done
unset IFS
echo "down.value $rx_bits"
echo "up.value $tx_bits"
